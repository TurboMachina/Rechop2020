// annexe word contient :
calcul du nombre min et max de stations

// variables globales :
loiDuréeService: tableau donné dans les consignes partie 2
tabPoisson = tableau des probabilités cumulées (cf annexe word point 2)
les paramètres x0, a, c, m de la partie 1 sont également disponibles dans ce DA

// structures utilisées :
stations: tableu des stations. Les deux premiers éléments sont toujours les stations express.
 Chaque station contient :
    - client : objet qui représente le client entrain d'être traité
    - minOccupées : temps d'occupation total sur la station
    - minInoccupées : temps d'inoccupation total sur la station
clients : tableau des clients qui arrivent toutes les minutes. Chaque élément
          contient un objet qui décrit le client avec les informations :
          - classe : classe du client ("express", "ordinaire" ou "prioritaire")
          - duréeService: nombre qui donne la durée de service restant pour le client
fileExpress : tableau qui contient les clients qui attendent dans la file express. La taille
  maximale de ce tableau est de 10
fileOrdinaire : tableau qui contient les clients qui attendent dans la file ordinaire.
L'ordre des clients dans les files correspond à l'ordre de leur position dans la file

---* gestionFileAttente
coutOptimal = BIG_FLOAT
nbStationsOptimal = 1
tempsSimulationMax = 600
// nbStationsMax = durée de service max * nombre max de clients par minutes
nbStationsMax = 48
// 5 = nombre minimal de stations = moyenne arrivée * temps moyen passé en file (4.3 arrondi à 5)
nbStations = 5
tailleMaxFileExpress = 10

// boucle sur laquelle on fait varier le nombre de stations ordinaires
// -- le nombre de stations express est toujours égal à 2
do while (nbStations <= nbStationsMax)
  // x0 premier nombre utilisé dans la génération de la suite aléatoire
  xn = x0
  tempsSimulation = 0
  fileExpress = []
  fileOrdinaire = []
  stations = []
  nbDéclassés = 0
  nbEjectés = 0
  // min = minutes
  minExpress = 0
  minOrdinaire = 0
  minPrioritaire = 0
  i = 0
  do while (i < nbStations)
    stations[i] = {
      client: null,
      minOccupées: 0
      minInoccupées: 0
    }
    i++
  enddo
  
  // boucle sur le temps de simulation
  do while (tempsSimulation <= tempsSimulationMax)
    // générer arrivée clients
    // cette méthode modifie le tableau "client" par référence
    module(générerArrivéeClients;tempsSimulation, clients;)
    // gérer arrivées clients
    // en python les tableau sont modifiés par référence, il n'est donc pas nécessaire
    // d'afficher le retour de la méthode (cette méthode modifie les files et le tableau des stations)
    module(GérerArrivéesClients;stations, clients, fileExpress, fileOrdinaire;)
    // gestion traitements express
    paragraphe(GererExpress)
    // gestion traitements ordinaires
    paragraphe(GererOrdinaire)
    // décrémenter durée service à toutes les stations occupées
    iStation = 0
    do while (i < nbStations)
      if(stations[iStation].client != null)
        stations[iStation].client.duréeService--
        stations[iStation].minOccupées++
        if(stations[iStation].client.classe == "ordinaire")
          minOrdinaire ++
        else
          minPrioritaire ++
        endif
      else
        stations[iStation].minInoccupées++
      endif
    enddo
    tempsSimulation++
  enddo
  // calcul du cout de la simulation et enregistrement du nombre de stations optimal
  paragraphe(CalculCouts)
  if(coutTotal < coutOptimal)
    coutOptimal = coutTotal
    nbStationsOptimal = nbStations
  endif
  nbStations++
enddo
------

---* générerArrivéeClients(tempsSimulation)
clients = []
probaPoisson = générerNombreAléatoire(xn) / m
iPoisson = 0
classeTrouvée = false
do while (!classeTrouvée)
if(probaPoisson <= tabPoisson[i])
  nbClients = iPoisson
  classeTrouvée = true
endif
iPoisson++
enddo
i = 0
// création d'objets qui décrivent les clients
do while (i < nbClients)
  module(générerDuréeService;xn;duréeService)
  if(duréeService == 1)
    classe = "express"
  else
    module(déterminerSiClientPrioritaire;xn;estPrioritaire)
    if(estPrioritaire)
      classe = "prioritaire"
    else
      classe = "ordinaire"
    endif
  endif

  clients.push({
    classe: classe
    duréeService: duréeService
  })
enddo
  return clients
------

---* déterminerSiClientPrioritaire(xn)
// le chiffre 1 a été choisi au hasard
// pour qu'un dixième des clients soit prioritaire
xn = générerNombreAléatoire(xn)
nombreAléatoire = ((xn / m) * 10).ENT
return nombreAléatoire == 1
------

---* générerDuréeService(xn)
xn = générerNombreAléatoire(xn)
nombreAléatoire = (((xn / m) * 10).ENT + 1) * 6
if (nombreAléatoire <= 24)
 return 1
else
if (nombreAléatoire <= 42)
  return 2
else
if (nombreAléatoire <= 52)
  return 3
else
if (nombreAléatoire <= 55)
  return 4
else
if (nombreAléatoire <= 58)
  return 5
else
return 6
endif
endif
endif
endif
endif
------

---* GérerArrivéesClients
i = 0
do while (i < clients.length)
if (clients[i].classe == "express")
  if (fileExpress.length < 10)
    fileExpress.push(clients[i])
  else
    clients[i].classe == "ordinaire"
    file.push(clients[i])
    nbDéclassés++
  endif
endif
if (clients[i].classe == "ordinaire")
  file.push(clients[i])
endif
if (clients[i].classe == "prioritaire")
  // trouver une station vide
  iStation = 2
  do while (iStation < stations.length && stations[iStation].clients != null)
    iStation ++
  enddo
  // une station est libre
  if(iStation < stations.length)
    stations[iStation].client = clients[i]
    // toutes les stations sont occupées
    else
      // trouver le client avec le temps de traitement max
      iStation = 2
      iMaxDurée = 2
      maxDurée = 0
      do while (iStation < stations.length)
        if(stations[iStation].client.duréeService > maxDurée && stations[iStation].client.classe != "prioritaire")
          maxDurée = stations[iStation].client.duréeService
          iMaxDurée = iStation
        endif
        iStation++
      enddo
      if(maxDurée == 0)  
        // insérer le prioritaire en début de file si toutes les stations sont occupées par des prioritaires
        // en python la méthode insert permet d'ajouter un élément en début de tableau
        fileOrdinaire.insert(0, clients[iClient])
      else
        clientEjecté = stations[iStation].client
        nbEjectés++
        fileOrdinaire.insert(0, clientEjecté)
        stations[iStation].client = clients[iClient]
      endif
  endif
endif
i++
enddo
------

---* GererExpress
iStation = 0
do while (iStation < 2)
  if(stations[iStation].client == null)
    if(fileExpress.length > 0)
      stations[iStation].client = fileExpress[0]
      fileExpress.pop(0)
    endif
  else
    if(stations[iStation].client.duréeService == 0 && fileExpress.length > 0)
      stations[iStation].client = fileExpress[0]
      minExpress += fileExpress[0].duréeService
      // enlever le premier element de la file
      fileExpress.pop(0)
    endif
    if(stations[iStation].client.duréeService == 0 && fileExpress.length == 0)
      stations[iStation].client = null
    endif
  endif
  iStation++
enddo
minExpress += fileExpress.length
------

---* GererOrdinaire
iStation = 2
do while (iStation < stations.length)
  if(stations[iStation].client == null)
    if(fileOrdinaire.length > 0)
      stations[iStation].client = fileOrdinaire[0]
      fileOrdinaire.pop(0)
    endif
  else
    if(stations[iStation].client.duréeService == 0 && fileOrdinaire.length > 0)
      stations[iStation].client = fileOrdinaire[0]
      // enlever le premier element de la file
      fileOrdinaire.pop(0)
    endif
    if(stations[iStation].client.duréeService == 0 && fileOrdinaire.length == 0)
      stations[iStation].client = null
    endif
  endif
  iStation++
enddo
iFile = 0
do while (iFile < fileOrdinaire.length)
if(fileOrdinaire[iFile].classe == "ordinaire")
  minOrdinaire++
else
  minPrioritaire++
endif
enddo
------

---* CalculCouts
coutsExpress = (minExpress / 60) * 35
coutsOrdinaire = (minOrdinaire / 60) * 25
coutsPrioritaire = (minPrioritaire / 60) * 45

iStation = 0
do while (iStation < stations.length)
if(iStation == 0 || iStation == 1)
  coutsExpress += stations[iStation].minOccupées / 60 * 32
else
  coutsOrdinaires += stations[iStation].minOccupées / 60 * 30
endif
coutsInoccupation = stations[iStation].minInoccupées / 60 * 18
iStation++
enddo

coutTotal = coutsExpress + coutsOrdinaire + coutsPrioritaire + coutsInoccupation
            + nbDéclassés * 15 + nbEjectés * 20
------

---* générerNombreAléatoire(xn)
return (a * Xn + c) % m
------

///////////////////////////////////////////////////////////////////////////////

















